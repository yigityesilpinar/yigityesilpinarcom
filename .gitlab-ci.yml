image: yigityesilpinar/docker-node:latest

variables:
  PROJECT_USERNAME: 'yigityesilpinar'
  RELEASE_BRANCH: 'master'
  GCLOUD_CLI_PATH: '/google-cloud-sdk/bin/gcloud'
  KUBECTL_CLI_PATH: '/google-cloud-sdk/bin/kubectl'
  GCLOUD_DOCKER_IMAGE: 'gcr.io/$GCLOUD_PROJECT_ID/web'
  GCLOUD_SECRETS_FILEPATH: './gcloud-service-key.json'
  GCLOUD_CLUSTER: 'yycom-cluster'
  GCLOUD_CLUSTER_ZONE: 'europe-west3-b'
  VERSION_FILEPATH: './build/version.txt'
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ''

services:
  - docker:19.03.11-dind

before_script:
  - docker info

cache: &global_cache
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
  policy: pull-push

stages:
  - install
  - lintAndTest
  - build
  - version
  - deploy

.pullNode:
  cache:
    # inherit all global cache settings
    <<: *global_cache
    # override the policy
    policy: pull

install:
  stage: install
  cache:
    # inherit all global cache settings
    <<: *global_cache
    # override the policy
    policy: pull-push
  script:
    - npm install

lintAndTest:type:check:
  stage: lintAndTest
  extends: .pullNode
  script:
    - npm run type:check

lintAndTest:lint:
  stage: lintAndTest
  extends: .pullNode
  script:
    - npm run lint

lintAndTest:test:
  stage: lintAndTest
  extends: .pullNode
  script:
    - npm run test

build:
  stage: build
  extends: .pullNode
  artifacts:
    paths:
      - build/
    expire_in: 30 mins
  script:
    - npm run build

version:
  stage: version
  extends: .pullNode
  rules:
    - if: '$CI_COMMIT_BRANCH == $RELEASE_BRANCH'
  dependencies:
    - build
  artifacts:
    paths:
      - build/
    expire_in: 30 mins
  script:
    # find the latest tag and generate next version into $VERSION_FILEPATH
    - npm run generateVersion
    # update package.json version (and lock file) only
    - npm version --no-git-tag-version $( cat $VERSION_FILEPATH )
    # prepare git ssh and push the new version (tag)
    - echo "${CI_DEPLOY_KEY}" > /root/.ssh/id_rsa && chmod 400 /root/.ssh/id_rsa
    - ssh-keyscan gitlab.com >> /root/.ssh/known_hosts
    - git commit -am "CI version tag $( cat $VERSION_FILEPATH )"
    - git tag $( cat $VERSION_FILEPATH )
    - git remote set-url origin "git@gitlab.com:$CI_PROJECT_PATH.git"
    - git push origin HEAD:$CI_COMMIT_REF_NAME -o ci.skip # Pushes to the same branch as the trigger
    # push git tag
    - git push origin $( cat $VERSION_FILEPATH ) -o ci.skip

deploy:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == $RELEASE_BRANCH'
      when: manual
  dependencies:
    - version
  script:
    # prepare auth for gcloud
    - IMAGE_TAG=$( cat $VERSION_FILEPATH )
    - echo $GCLOUD_SERVICE_KEY > $GCLOUD_SECRETS_FILEPATH
    - $GCLOUD_CLI_PATH auth activate-service-account --key-file $GCLOUD_SECRETS_FILEPATH
    # put the right version for image in package.json
    - sed -i -e 's|\"version\":\s\".*\"|\"version\":\"'$IMAGE_TAG'\"|' package.json
    # build docker image
    - docker build -t $GCLOUD_DOCKER_IMAGE:$IMAGE_TAG .
    - docker login -u _json_key --password-stdin https://gcr.io < $GCLOUD_SECRETS_FILEPATH
    - docker push $GCLOUD_DOCKER_IMAGE:$IMAGE_TAG
    # deploy the new image to prod using gcloud & kubectl
    - $GCLOUD_CLI_PATH config set project $GCLOUD_PROJECT_ID
    - $GCLOUD_CLI_PATH container clusters get-credentials $GCLOUD_CLUSTER --zone=$GCLOUD_CLUSTER_ZONE
    - sed -i 's|${DOCKER_IMAGE_WITH_TAG}|'"$GCLOUD_DOCKER_IMAGE":"$IMAGE_TAG"'|g' web-deployment.yaml
    - $KUBECTL_CLI_PATH apply -f web-deployment.yaml
  tags:
    - docker
